syntax = "proto3";

package cuddlyproto;

import "common.proto";
import "datanode.proto";

// Heartbeat service definition
service HeartbeatService {
    rpc Heartbeat (HeartbeatRequest) returns (HeartbeatResponse);
}

/// Heartbeat request message : 
message HeartbeatRequest {
    DatanodeRegistrationProto registration = 1; // Datanode info
    repeated StorageReportProto reports = 2;
}

// Heartbeat response message
message HeartbeatResponse {
    StatusCode status = 2;  // Error message if the heartbeat was not received successfully
}



/**
 * registration - datanode registration information
 * capacity - total storage capacity available at the datanode
 * dfsUsed - storage used by HDFS
 * remaining - remaining storage available for HDFS
 * blockPoolUsed - storage used by the block pool
 * xmitsInProgress - number of transfers from this datanode to others
 * xceiverCount - number of active transceiver threads
 * failedVolumes - number of failed volumes.  This is redundant with the
 *     information included in volumeFailureSummary, but the field is retained
 *     for backwards compatibility.
 * cacheCapacity - total cache capacity available at the datanode
 * cacheUsed - amount of cache used
 * volumeFailureSummary - info about volume failures
 * slowPeers - info about peer DataNodes that are suspected to be slow.
 * slowDisks - info about DataNode disks that are suspected to be slow.
 * blksMovementResults - status of the scheduled blocks movements
 */
// message HeartbeatRequestProto {
// required DatanodeRegistrationProto registration = 1; // Datanode info
// repeated StorageReportProto reports = 2;
// optional uint32 xmitsInProgress = 3 [ default = 0 ];
// optional uint32 xceiverCount = 4 [ default = 0 ];
// optional uint32 failedVolumes = 5 [ default = 0 ];
// optional uint64 cacheCapacity = 6 [ default = 0 ];
// optional uint64 cacheUsed = 7 [default = 0 ];
// optional VolumeFailureSummaryProto volumeFailureSummary = 8;
// optional bool requestFullBlockReportLease = 9 [ default = false ];
// repeated SlowPeerReportProto slowPeers = 10;
// repeated SlowDiskReportProto slowDisks = 11;
// }
  
  /**
   * cmds - Commands from namenode to datanode.
   * haStatus - Status (from an HA perspective) of the NN sending this response
   */
// message HeartbeatResponseProto {
// repeated DatanodeCommandProto cmds = 1; // Returned commands can be null
// required NNHAStatusHeartbeatProto haStatus = 2;
// optional RollingUpgradeStatusProto rollingUpgradeStatus = 3;
// optional RollingUpgradeStatusProto rollingUpgradeStatusV2 = 4;
// optional uint64 fullBlockReportLeaseId = 5 [ default = 0 ];
// optional bool isSlownode = 6 [ default = false ];
// }